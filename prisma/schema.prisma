// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
// https://authjs.dev/getting-started/adapters/prisma

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password authentication
  accounts      Account[]
  sessions      Session[]
  surveyResponses SurveyResponse[]
  tiktokAccounts TikTokAccount[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model SurveyResponse {
  id                String   @id @default(cuid())
  userId            String?  // Optional - can be null for anonymous responses
  user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Survey answers
  platform          String?  // instagram, tiktok, both
  goal              String?  // grow, consistency, engagement, automate
  postingFrequency  String?  // daily, weekly, occasional
  userType          String?  // creator, business, agency, exploring
  automationLevel   String?  // helpers, mostly, full

  // Selected services (stored as JSON array of service IDs)
  selectedServices  String?  // JSON stringified array

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
}

model TikTokAccount {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  openId      String   @unique
  unionId     String?
  username    String?
  displayName String?
  avatarUrl   String?

  accessToken      String?
  refreshToken     String?
  expiresAt        DateTime?
  refreshExpiresAt DateTime?
  scope            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
